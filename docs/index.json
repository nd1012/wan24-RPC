{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API reference | wan24-RPC",
    "keywords": "API reference Choose a type from the left to start browsing."
  },
  "api/wan24.RPC.DisposableRpcApiBase.html": {
    "href": "api/wan24.RPC.DisposableRpcApiBase.html",
    "title": "Class DisposableRpcApiBase | wan24-RPC",
    "keywords": "Class DisposableRpcApiBase Base type for a disposable RPC API Inheritance object DisposableBase DisposableRpcApiBase Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.Dispose(bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public abstract class DisposableRpcApiBase : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source DisposableRpcApiBase() Constructor Declaration protected DisposableRpcApiBase() | Edit this page View Source DisposableRpcApiBase(in bool, in bool) Constructor Declaration protected DisposableRpcApiBase(in bool asyncDisposing, in bool allowFinalizer = false) Parameters Type Name Description bool asyncDisposing Asynchronous disposing? bool allowFinalizer Don't count running the finalizer as an error? Methods | Edit this page View Source Dispose() Declaration [NoRpc] public void Dispose() | Edit this page View Source DisposeAsync() Declaration [NoRpc] public ValueTask DisposeAsync() Returns Type Description ValueTask | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration [NoRpc] public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration [NoRpc] public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration [NoRpc] public override string? ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.RPC.NoRpcAttribute.html": {
    "href": "api/wan24.RPC.NoRpcAttribute.html",
    "title": "Class NoRpcAttribute | wan24-RPC",
    "keywords": "Class NoRpcAttribute Attribute for a RPC API method (parameter) which isn't RPC servable Inheritance object Attribute NoRpcAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax [AttributeUsage(AttributeTargets.Method|AttributeTargets.Parameter)] public class NoRpcAttribute : Attribute Remarks Constructor Constructors | Edit this page View Source NoRpcAttribute() Attribute for a RPC API method (parameter) which isn't RPC servable Declaration public NoRpcAttribute() Remarks Constructor"
  },
  "api/wan24.RPC.NoRpcCompressionAttribute.html": {
    "href": "api/wan24.RPC.NoRpcCompressionAttribute.html",
    "title": "Class NoRpcCompressionAttribute | wan24-RPC",
    "keywords": "Class NoRpcCompressionAttribute Attribute for a RPC API method stream return value or parameter which shouldn't be communicated compressed Inheritance object Attribute NoRpcCompressionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax [AttributeUsage(AttributeTargets.Method|AttributeTargets.Parameter)] public class NoRpcCompressionAttribute : Attribute Remarks Constructor Constructors | Edit this page View Source NoRpcCompressionAttribute() Attribute for a RPC API method stream return value or parameter which shouldn't be communicated compressed Declaration public NoRpcCompressionAttribute() Remarks Constructor"
  },
  "api/wan24.RPC.NoRpcDisposeAttribute.html": {
    "href": "api/wan24.RPC.NoRpcDisposeAttribute.html",
    "title": "Class NoRpcDisposeAttribute | wan24-RPC",
    "keywords": "Class NoRpcDisposeAttribute Attribute for a RPC API which shouldn't be disposed after use, or a RPC API method which returns a value which shouldn't be disposed after sending the response Inheritance object Attribute NoRpcDisposeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class NoRpcDisposeAttribute : Attribute Remarks Constructor Constructors | Edit this page View Source NoRpcDisposeAttribute() Attribute for a RPC API which shouldn't be disposed after use, or a RPC API method which returns a value which shouldn't be disposed after sending the response Declaration public NoRpcDisposeAttribute() Remarks Constructor"
  },
  "api/wan24.RPC.NoRpcEnumerableAttribute.html": {
    "href": "api/wan24.RPC.NoRpcEnumerableAttribute.html",
    "title": "Class NoRpcEnumerableAttribute | wan24-RPC",
    "keywords": "Class NoRpcEnumerableAttribute Attribute for a RPC API method return value or parameter which shouldn't be communicated enumerated Inheritance object Attribute NoRpcEnumerableAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax [AttributeUsage(AttributeTargets.Method|AttributeTargets.Parameter)] public class NoRpcEnumerableAttribute : Attribute Remarks Constructor Constructors | Edit this page View Source NoRpcEnumerableAttribute() Attribute for a RPC API method return value or parameter which shouldn't be communicated enumerated Declaration public NoRpcEnumerableAttribute() Remarks Constructor"
  },
  "api/wan24.RPC.RpcAliasAttribute.html": {
    "href": "api/wan24.RPC.RpcAliasAttribute.html",
    "title": "Class RpcAliasAttribute | wan24-RPC",
    "keywords": "Class RpcAliasAttribute Attribute for a RPC API (method) which uses an alias name Inheritance object Attribute RpcAliasAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class RpcAliasAttribute : Attribute Remarks Constructor Constructors | Edit this page View Source RpcAliasAttribute(string) Attribute for a RPC API (method) which uses an alias name Declaration public RpcAliasAttribute(string alias) Parameters Type Name Description string alias Alias name Remarks Constructor Properties | Edit this page View Source Alias Alias name Declaration public virtual string Alias { get; } Property Value Type Description string"
  },
  "api/wan24.RPC.RpcApiBase.html": {
    "href": "api/wan24.RPC.RpcApiBase.html",
    "title": "Class RpcApiBase | wan24-RPC",
    "keywords": "Class RpcApiBase Base type for a RPC API Inheritance object RpcApiBase Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public abstract class RpcApiBase Remarks Constructor Constructors | Edit this page View Source RpcApiBase() Base type for a RPC API Declaration protected RpcApiBase() Remarks Constructor Methods | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration [NoRpc] public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration [NoRpc] public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration [NoRpc] public override string? ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "api/wan24.RPC.RpcCancellationMessage.html": {
    "href": "api/wan24.RPC.RpcCancellationMessage.html",
    "title": "Class RpcCancellationMessage | wan24-RPC",
    "keywords": "Class RpcCancellationMessage RPC cancellation message Inheritance object ValidatableObjectBase StreamSerializerBase RpcMessageBase RpcResponseBase RpcCancellationMessage Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members RpcResponseBase.RequireId RpcResponseBase.ReturnValue RpcMessageBase.VERSION RpcMessageBase.MinHlObjectVersion RpcMessageBase.SerializedHlObjectVersion RpcMessageBase.HlObjectVersion RpcMessageBase.Id RpcMessageBase.Serialize(Stream) RpcMessageBase.Deserialize(Stream, int) RpcMessageBase.SerializeAsync(Stream, CancellationToken) RpcMessageBase.DeserializeAsync(Stream, int, CancellationToken) StreamSerializerBase.BASE_VERSION StreamSerializerBase.SerializedObjectVersion StreamSerializerBase.SerializerVersion ValidatableObjectBase.Validate(ValidationContext) ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public class RpcCancellationMessage : RpcResponseBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Constructors | Edit this page View Source RpcCancellationMessage() RPC cancellation message Declaration public RpcCancellationMessage() Fields | Edit this page View Source TYPE_ID RPC message type ID Declaration public const int TYPE_ID = 1 Field Value Type Description int Properties | Edit this page View Source Type Type ID Declaration public override int Type { get; } Property Value Type Description int Overrides RpcMessageBase.Type Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.RPC.RpcErrorResponseMessage.html": {
    "href": "api/wan24.RPC.RpcErrorResponseMessage.html",
    "title": "Class RpcErrorResponseMessage | wan24-RPC",
    "keywords": "Class RpcErrorResponseMessage RPC error response message Inheritance object ValidatableObjectBase StreamSerializerBase RpcMessageBase RpcErrorResponseMessage Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members RpcMessageBase.VERSION RpcMessageBase.MinHlObjectVersion RpcMessageBase.SerializedHlObjectVersion RpcMessageBase.HlObjectVersion RpcMessageBase.Id RpcMessageBase.Serialize(Stream) RpcMessageBase.Deserialize(Stream, int) StreamSerializerBase.BASE_VERSION StreamSerializerBase.SerializedObjectVersion StreamSerializerBase.SerializerVersion ValidatableObjectBase.Validate(ValidationContext) ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public class RpcErrorResponseMessage : RpcMessageBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Remarks Constructor Constructors | Edit this page View Source RpcErrorResponseMessage() RPC error response message Declaration public RpcErrorResponseMessage() Remarks Constructor Fields | Edit this page View Source TYPE_ID RPC message type ID Declaration public const int TYPE_ID = 0 Field Value Type Description int Properties | Edit this page View Source Error Error Declaration public required Exception Error { get; set; } Property Value Type Description Exception | Edit this page View Source RequireId If an Id is required Declaration public override sealed bool RequireId { get; } Property Value Type Description bool Overrides RpcMessageBase.RequireId | Edit this page View Source Type Type ID Declaration public override int Type { get; } Property Value Type Description int Overrides RpcMessageBase.Type Methods | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides RpcMessageBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides RpcMessageBase.SerializeAsync(Stream, CancellationToken) Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.RPC.RpcEventMessageBase.html": {
    "href": "api/wan24.RPC.RpcEventMessageBase.html",
    "title": "Class RpcEventMessageBase | wan24-RPC",
    "keywords": "Class RpcEventMessageBase Base type for a RPC event message Inheritance object ValidatableObjectBase StreamSerializerBase RpcMessageBase RpcEventMessageBase Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members RpcMessageBase.VERSION RpcMessageBase.MinHlObjectVersion RpcMessageBase.SerializedHlObjectVersion RpcMessageBase.HlObjectVersion RpcMessageBase.Type RpcMessageBase.Id RpcMessageBase.Serialize(Stream) RpcMessageBase.Deserialize(Stream, int) StreamSerializerBase.BASE_VERSION StreamSerializerBase.SerializedObjectVersion StreamSerializerBase.SerializerVersion ValidatableObjectBase.Validate(ValidationContext) ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public abstract class RpcEventMessageBase : RpcMessageBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Constructors | Edit this page View Source RpcEventMessageBase() Base type for a RPC event message Declaration protected RpcEventMessageBase() Properties | Edit this page View Source Name Event name Declaration [MinLength(1)] [MaxLength(255)] public required string Name { get; set; } Property Value Type Description string | Edit this page View Source RequireId If an Id is required Declaration public override sealed bool RequireId { get; } Property Value Type Description bool Overrides RpcMessageBase.RequireId Methods | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides RpcMessageBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides RpcMessageBase.SerializeAsync(Stream, CancellationToken) Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.RPC.RpcException.html": {
    "href": "api/wan24.RPC.RpcException.html",
    "title": "Class RpcException | wan24-RPC",
    "keywords": "Class RpcException RPC remote exception (InnerException should serve the remote exception type) Inheritance object Exception RpcException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax [Serializable] public class RpcException : Exception, ISerializable Constructors | Edit this page View Source RpcException() Constructor Declaration public RpcException() | Edit this page View Source RpcException(string?) Constructor Declaration public RpcException(string? message) Parameters Type Name Description string message Message | Edit this page View Source RpcException(string?, Exception?) Constructor Declaration public RpcException(string? message, Exception? inner) Parameters Type Name Description string message Message Exception inner Inner exception Properties | Edit this page View Source RemoteExceptionType Remote exception type name Declaration public required string RemoteExceptionType { get; init; } Property Value Type Description string Implements ISerializable"
  },
  "api/wan24.RPC.RpcMessageBase.html": {
    "href": "api/wan24.RPC.RpcMessageBase.html",
    "title": "Class RpcMessageBase | wan24-RPC",
    "keywords": "Class RpcMessageBase Base type for a RPC message Inheritance object ValidatableObjectBase StreamSerializerBase RpcMessageBase RpcErrorResponseMessage RpcEventMessageBase RpcRequestBase RpcResponseBase Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members StreamSerializerBase.BASE_VERSION StreamSerializerBase.SerializedObjectVersion StreamSerializerBase.SerializerVersion ValidatableObjectBase.Validate(ValidationContext) ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public abstract class RpcMessageBase : StreamSerializerBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Remarks Constructor Constructors | Edit this page View Source RpcMessageBase() Base type for a RPC message Declaration protected RpcMessageBase() Remarks Constructor Fields | Edit this page View Source VERSION Object version number Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source HlObjectVersion Higher level object version Declaration public virtual int HlObjectVersion { get; } Property Value Type Description int | Edit this page View Source Id ID Declaration [RequiredIf(\"RequireId\", new object?[] { true })] public long? Id { get; set; } Property Value Type Description long? | Edit this page View Source MinHlObjectVersion Minimum supported higher level object version (see SerializedHlObjectVersion) Declaration protected virtual int? MinHlObjectVersion { get; } Property Value Type Description int? | Edit this page View Source RequireId If an Id is required Declaration public virtual bool RequireId { get; } Property Value Type Description bool | Edit this page View Source SerializedHlObjectVersion Deserialized higher level object version Declaration protected int? SerializedHlObjectVersion { get; } Property Value Type Description int? | Edit this page View Source Type Type ID Declaration public abstract int Type { get; } Property Value Type Description int Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override sealed void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Serialize(Stream) Serialize Declaration protected override sealed void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.SerializeAsync(Stream, CancellationToken) Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.RPC.RpcMessageTypes.html": {
    "href": "api/wan24.RPC.RpcMessageTypes.html",
    "title": "Class RpcMessageTypes | wan24-RPC",
    "keywords": "Class RpcMessageTypes Registered RPC message types Inheritance object RpcMessageTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public static class RpcMessageTypes Methods | Edit this page View Source Get(in int) Get a RPC message type Declaration public static Type? Get(in int id) Parameters Type Name Description int id RPC message type ID Returns Type Description Type RPC message type | Edit this page View Source Register<T>(in int) Register a RPC message type Declaration public static void Register<T>(in int id) where T : RpcMessageBase, new() Parameters Type Name Description int id RPC message type ID Type Parameters Name Description T RPC message type"
  },
  "api/wan24.RPC.RpcRequestBase.html": {
    "href": "api/wan24.RPC.RpcRequestBase.html",
    "title": "Class RpcRequestBase | wan24-RPC",
    "keywords": "Class RpcRequestBase Base type for a RPC request message Inheritance object ValidatableObjectBase StreamSerializerBase RpcMessageBase RpcRequestBase Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members RpcMessageBase.VERSION RpcMessageBase.MinHlObjectVersion RpcMessageBase.SerializedHlObjectVersion RpcMessageBase.HlObjectVersion RpcMessageBase.Type RpcMessageBase.Id RpcMessageBase.Serialize(Stream) RpcMessageBase.Deserialize(Stream, int) StreamSerializerBase.BASE_VERSION StreamSerializerBase.SerializedObjectVersion StreamSerializerBase.SerializerVersion ValidatableObjectBase.Validate(ValidationContext) ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public abstract class RpcRequestBase : RpcMessageBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Remarks Constructor Constructors | Edit this page View Source RpcRequestBase() Base type for a RPC request message Declaration protected RpcRequestBase() Remarks Constructor Properties | Edit this page View Source Api API name Declaration [MinLength(1)] [MaxLength(255)] public string? Api { get; set; } Property Value Type Description string | Edit this page View Source Method API method name Declaration [MinLength(1)] [MaxLength(255)] public required string Method { get; set; } Property Value Type Description string | Edit this page View Source RequireId If an Id is required Declaration public override bool RequireId { get; } Property Value Type Description bool Overrides RpcMessageBase.RequireId | Edit this page View Source WantsResponse If a response is being awaited (if true, a return value and/or an exception response will be awaited and processed) Declaration public virtual bool WantsResponse { get; set; } Property Value Type Description bool Methods | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides RpcMessageBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides RpcMessageBase.SerializeAsync(Stream, CancellationToken) Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.RPC.RpcResponseBase.html": {
    "href": "api/wan24.RPC.RpcResponseBase.html",
    "title": "Class RpcResponseBase | wan24-RPC",
    "keywords": "Class RpcResponseBase Base type for a RPC response message Inheritance object ValidatableObjectBase StreamSerializerBase RpcMessageBase RpcResponseBase RpcCancellationMessage Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members RpcMessageBase.VERSION RpcMessageBase.MinHlObjectVersion RpcMessageBase.SerializedHlObjectVersion RpcMessageBase.HlObjectVersion RpcMessageBase.Type RpcMessageBase.Id RpcMessageBase.Serialize(Stream) RpcMessageBase.Deserialize(Stream, int) RpcMessageBase.SerializeAsync(Stream, CancellationToken) RpcMessageBase.DeserializeAsync(Stream, int, CancellationToken) StreamSerializerBase.BASE_VERSION StreamSerializerBase.SerializedObjectVersion StreamSerializerBase.SerializerVersion ValidatableObjectBase.Validate(ValidationContext) ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public abstract class RpcResponseBase : RpcMessageBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Remarks Constructor Constructors | Edit this page View Source RpcResponseBase() Base type for a RPC response message Declaration protected RpcResponseBase() Remarks Constructor Properties | Edit this page View Source RequireId If an Id is required Declaration public override sealed bool RequireId { get; } Property Value Type Description bool Overrides RpcMessageBase.RequireId | Edit this page View Source ReturnValue Return value Declaration public object? ReturnValue { get; set; } Property Value Type Description object Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.RPC.RpcVersionAttribute.html": {
    "href": "api/wan24.RPC.RpcVersionAttribute.html",
    "title": "Class RpcVersionAttribute | wan24-RPC",
    "keywords": "Class RpcVersionAttribute Attribute for an API version restricted RPC API method Inheritance object Attribute RpcVersionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class RpcVersionAttribute : Attribute Constructors | Edit this page View Source RpcVersionAttribute(int) Constructor Declaration public RpcVersionAttribute(int fromVersion) Parameters Type Name Description int fromVersion From version including | Edit this page View Source RpcVersionAttribute(int, int, string?) Constructor Declaration public RpcVersionAttribute(int fromVersion, int toVersion, string? newerMethodName = null) Parameters Type Name Description int fromVersion From version including int toVersion To version including string newerMethodName Newer method name (forwards the RPC processor to another RPC API method for newer API versions) Properties | Edit this page View Source FromVersion From version including Declaration public int FromVersion { get; } Property Value Type Description int | Edit this page View Source NewerMethodName Newer RPC API method name Declaration public string? NewerMethodName { get; } Property Value Type Description string | Edit this page View Source ToVersion To version including Declaration public int? ToVersion { get; } Property Value Type Description int? Methods | Edit this page View Source GetNewerMethodName(in int, in string) Get the newer RPC API method name to use, if incompatible Declaration public virtual string? GetNewerMethodName(in int version, in string currentMethodName) Parameters Type Name Description int version API version string currentMethodName Current RPC API method name used Returns Type Description string The current or newer RPC API method name to use, or null, if the method can't be served with the peers API version | Edit this page View Source IsCompatibleWithApiVersion(in int) Determine if an API version is compatible Declaration public virtual bool IsCompatibleWithApiVersion(in int version) Parameters Type Name Description int version API version Returns Type Description bool If compatible"
  },
  "api/wan24.RPC.StreamExtensions.html": {
    "href": "api/wan24.RPC.StreamExtensions.html",
    "title": "Class StreamExtensions | wan24-RPC",
    "keywords": "Class StreamExtensions Stream extensions Inheritance object StreamExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.RPC Assembly: wan24RPC.dll Syntax public static class StreamExtensions Methods | Edit this page View Source ReadRpcMessageAsync(Stream, int?, Type?, CancellationToken) Read a RPC message Declaration public static ValueTask<RpcMessageBase> ReadRpcMessageAsync(this Stream stream, int? serializerVersion = null, Type? expectedType = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream int? serializerVersion Serializer version Type expectedType Expected RPC message type CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<RpcMessageBase> RPC message | Edit this page View Source ReadRpcMessageAsync<T>(Stream, int?, CancellationToken) Read a RPC message Declaration public static ValueTask<RpcMessageBase> ReadRpcMessageAsync<T>(this Stream stream, int? serializerVersion = null, CancellationToken cancellationToken = default) where T : RpcMessageBase, new() Parameters Type Name Description Stream stream Stream int? serializerVersion Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<RpcMessageBase> RPC message Type Parameters Name Description T Expected RPC message type | Edit this page View Source WriteRpcMessageAsync(Stream, RpcMessageBase, CancellationToken) Write a RPC message Declaration public static ValueTask WriteRpcMessageAsync(this Stream stream, RpcMessageBase message, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream RpcMessageBase message Message CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask"
  },
  "api/wan24.RPC.html": {
    "href": "api/wan24.RPC.html",
    "title": "Namespace wan24.RPC | wan24-RPC",
    "keywords": "Namespace wan24.RPC Classes DisposableRpcApiBase Base type for a disposable RPC API NoRpcAttribute Attribute for a RPC API method (parameter) which isn't RPC servable NoRpcCompressionAttribute Attribute for a RPC API method stream return value or parameter which shouldn't be communicated compressed NoRpcDisposeAttribute Attribute for a RPC API which shouldn't be disposed after use, or a RPC API method which returns a value which shouldn't be disposed after sending the response NoRpcEnumerableAttribute Attribute for a RPC API method return value or parameter which shouldn't be communicated enumerated RpcAliasAttribute Attribute for a RPC API (method) which uses an alias name RpcApiBase Base type for a RPC API RpcCancellationMessage RPC cancellation message RpcErrorResponseMessage RPC error response message RpcEventMessageBase Base type for a RPC event message RpcException RPC remote exception (InnerException should serve the remote exception type) RpcMessageBase Base type for a RPC message RpcMessageTypes Registered RPC message types RpcRequestBase Base type for a RPC request message RpcResponseBase Base type for a RPC response message RpcVersionAttribute Attribute for an API version restricted RPC API method StreamExtensions Stream extensions"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | wan24-RPC",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "wan24-RPC | wan24-RPC",
    "keywords": "wan24-RPC This library contains some RPC helper which enables an app to use any bi-directional RPC stream on the fly. It supports Stream channels Enumeration channels Events Cancellation API versioning Compression Server AND client RPC (bi-directional) I try to keep the API of this library as abstract as possible, but giving a fully working environment. This doesn't work for an RPC service, 'cause for this the underlaying transport architecture must be known and implemented. Since there are too may possibilities, I've decided to concentrate on streams, which seem to be the best center for an abstraction logic, which opens the most possibilities. While the RPC stream is the central element, all other things (processor, service, SDK) are optional and just suggestions that are built on each other to let you make the decision how far you want or need to go, finally, and to offer everything to go for rapid app development. NOTE: This library requires a .NET server AND client. No other languages are supported at present. How to get it There are two NuGet packages which you might want to use: Package Description wan24-RPC Core RPC functionality (client and server) wan24-RPC-Service RPC service functionality (server only) Usage Creating a RPC API A RPC API is any type which exports public methods. You should use the (Disposable)RpcApiBase base type, 'cause it uses the NoRpcAttribute on methods which should not be remote callable. A short overview over the helpers that you may want to use: Helper Description RpcApiBase RPC API base type DisposableRpcApiBase Disposable RPC API base type RpcAliasAttribute Attribute for APIs or methods which should be exported using a different name NoRpcAttribute Attribute for public methods or parameters which shouldn't be accessed from the peer NoRpcDisposeAttribute Attribute for RPC methods which return a disposable value which should NOT be disposed after sending it to the peer, or for API classes which should NOT be disposed, if disconnected NoRpcEnumerableAttribute Attribute for RPC method return value or parameters which are enumerables, but shouldn't be handled as enumerables during RPC call processing NoRpcCompressionAttribute Attribute for RPC method stream return value or parameters which shouldn't use compression ('cause they may be compressed already) RpcVersionAttribute Attribute for API or SDK methods which restrict the supported peer API version (evaluated by the RPC processor) Per default the API class and method names are used for addressing a RPC call. However, it's possible to add API classes and methods using customized names. If you use the pre-defined RPC service logic, wan24.Core.DiHelper is being used for dependency injection, so you may use keyed services also. RPC stream extensions Any blocking bi-directional stream can be used as RPC communication stream: // Reading any RPC message RpcMessageBase message = await stream.ReadRpcMessageAsync(); // Writing any RPC message await stream.WriteRpcMessageAsync(message); RpcMessageBase is just a base type, which is being used by RpcRequestBase which is a remote RPC call RpcResponseBase which is a remote RPC call response RpcEventMessageBase (which is a request which doesn't want a response) RpcErrorResponseMessage RpcCancellationMessage (which is a request which doesn't want a response) Those base types are used by SerializedRpc*(Request/Response)Message which use Stream-Serializer-Extensions for binary serialization JsonRpc*(Request/Response)Message which use wan24.Core.JsonHelper for JSON serialization and must be used as base type for your own implementations. Each RPC message type has an ID, which may be sent to the peer before the serialized message body. Your custom RPC message type needs to be registered: RpcMessageTypes.Register<YourRpcMessage>(1 << 8); NOTE: The first 8 bit of the message type ID are reserved, so your custom message type ID must start from 256+. Using the RPC processor The RPC processor is used to evaluate a RPC call to registered RPC API classes and methods: RpcProcessor processor = new(new(){ ApiTypes = [typeof(YourRpcApi)] }); await using(processor) { await processor.StartAsync(); while(peer.IsConnected) { // Receive a request message, first ... // Then evaluate it processor.Evaluate(message, yourReturnValueHandler); // The return value will be managed from the RPC processor automatic } } NOTE: One RPC processor instance is required for each RPC peer connection! WARNING: The number of processing evaluations is limited (using the RPC processor options). Any limit exceeding call will cause an exception at the peer! Using the RPC service You may use the RpcServiceBase as base class for your RPC service. The RpcServiceBase is a hosted service, which you can use with an app host: builder.Services.AddHostedService<YourRpcService>(); Example RPC service implementation: public class YourRpcService : RpcServiceBase { protected override async Task WaitForPeersAsync() { while(true) { // Wait for a connecting peer AddProcessorConnection(new WrapperStream(rpcStream), rpcProcessor); } } } NOTE: RpcServiceBase is included in the wan24-RPC-Service NuGet package. NOTE: rpcStream must be an IStream which is being disposed when the connection was closed! You can use WrapperStream to adopt any stream to the IStream interface without any hussle. NOTE: Exceptions thrown during evaluation will cause an error response, which will cause a RpcException at the waiting peer. Many methods can be overridden to customize the RPC service for your needs. Using the RPC SDK The RpcSdkBase is a base class for creating a SDK which uses a RPC stream: public class YourSdk : RpcSdkBase { public YourSdk() : base() { } public async Task ConnectAsync() { // Connect to the RPC server ... // Then set the RPC stream RPC = rpcStream; } public Task<AnyType> YourApiMethodAsync(AnyType2 parameter, CancellationToken ct = default) => SendRpcCallAsync<AnyType>(nameof(YourApiMethodAsync), ct, parameter); } The SDK will manage a RPC processor, if clientside RPC calls are enabled. SDK usage: YourSdk sdk = new(); await using(sdk) { // Configure the SDK connection ... // Then connect await sdk.ConnectAsync(); // Then call API methods AnyType result; try { result = await sdk.YourApiMethodAsync(value); } catch(RpcException ex) { // Handle the remote execution error // (InnerException has the remote exception type, if possible) } ... } TIP: For keeping consistence between the client and server RPC API and SDK implementations you can use a shared interface and implement an API method for pre-checking the API version, and if a client update is required, first. Enumerable parameters and return values Enumerables will be transfered asynchronous (streamed) and managed by the RPC processor automatic, if the type at the receiving side implements IList. A parameter or return value may be an IEnumerable<T> or IAsyncEnumerable<T>. NOTE: To disable that behavior you can use the NoRpcEnumerableAttribute for your RPC API or SDK method or RPC API parameter. For SDK method parameters wrap the value with NoRpcEnumerable. TIP: Use IAsyncEnumerable<T> where possible! WARNING: The number of processing enumerables is limited (using the RPC processor options). Any limit exceeding call will cause an exception at the peer! Stream parameters and return values Streams will be transfered asynchronous and managed by the RPC processor automatic. While synchronous stream usage is possible, all synchronous stream methods are mapped to asynchronous methods (you should avoid using them!). NOTE: If compression is enabled, streams will be transfered compressed per default. If you don't want that, you can use the NoRpcCompressionAttribute for your RPC API or SDK method or RPC API parameter. For SDK method parameters wrap a value with UncompressedRpcStream. WARNING: The number of processing streams is limited (using the RPC processor options). Any limit exceeding call will cause an exception at the peer! Events A RpcProcessor and a RpcSdkBase offer a simple solution for events using *RpcEventMessage and RpcEvent. In a processor or SDK you can register receivable events like this: RegisterEvent(new(nameof(YourEvent), typeof(YourEventData), RaiseYourEvent)); Example receivable event definition: public delegate void YourEvent_Delegate(object sender, YourEventData e); public event YourEvent_Delegate? YourEvent; private async void RaiseYourEvent(RpcEvent rpcEvent, object? e) { await Task.Yield(); if(e is not YourEventData data) // Exception will be handled by the processor or SDK throw new InvalidProgramException(\"Missing/invalid event data\"); YourEvent?.Invoke(this, data); } NOTE: Since event handling is a synchronous operation, it's not possible to write something back to the event data and respond it to the RPC peers event sending context. To send any event to the peer: anyObject.AnyEvent += (sender, e) => SendEvent(nameof(AnyObjectType.AnyEvent), new AnyEventData(sender, e)); The event message processing will be handled by the RPC processor automatic. NOTE: The SendEvent method doesn't return a task, but will send the event asynchronous in background. It's part of the processor and the SDK base types and may be called in any other context, also. TIP: You can enable event throttling by defining an event throttler instance in the RPC processor options. WARNING: You should remove event listeners in order to enable the GC to clan up the object reference, if a processor or a SDK instance isn't in use anymore! Cancellation If a SDK method timed out, the SDK will send a RpcCancellationMessage to the peer, which will then cancel the RPC method execution, if possible. For this the RPC API method needs to have a CancellationToken type parameter. API versioning You need to implement a version check into your SDK by yourself. It's required to use an unsigned integer number as version number. Using the RpcVersionAttribute you can restrict the supported API version and also forward a RPC processor to another API method for the used SDK version: public async Task<int> ApiVersionAsync(RpcProcessor processor, int peerSdkVersion, CancellationToken ct) { // Check the version number ... // Then use it processor.CurrentApiVersion = peerSdkVersion; // Maybe return the latest API version to signal an available optional update return YourApi.VERSION; } [RpcVersion(fromVersion: 1, toVersion: 3, newerMethodName: \"YourApiMethodV2Async\")] public async Task YourApiMethodAsync(AnyType parameter, CancellationToken ct) { // Used with peer versions 1, 2 and 3 } [RpcVersion(4)] public async Task<ReturnType> YourApiMethodV2Async(AnyType parameter, OtherType other, CancellationToken ct) { // Used from peer versions 4+ } To enable API version restrictions your API needs to set the CurrentApiVersion value to the RPC processor which manages the connection. Any RPC call to an API method which has a RpcVersionAttribute before the CurrentApiVersion value was set will cause an error at the client side. Since communicated objects are being serialized, and they may be changed, too, you could use the serializer versioning for IStreamSerializer implementations (see the documentation of the Stream-Serializer-Extensions NuGet package). The serializer versioning is fully independent from the API versioning. Anyway, if the serializer version of a communicated type increases, you should also increase the API version number to be safe, if the updated serialization requires a peer software update (which is the case when the new serialization doesn't support the previous object structure). A serializer version increment is required, if the new type revision is incompatible with the previous type revision. An API version increment is required on any incompatibility: Incompatible types Method signature changes Method removals For any other change incrementing a version number is optional and depends on the context of the change, and if the change is downward compatible."
  }
}